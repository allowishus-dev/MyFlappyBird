//
//  GameScene.swift
//  MyFlappyBird
//
//  Created by Bjørn Puggaard on 06/02/15.
//  Copyright (c) 2015 Bjørn Puggaard. All rights reserved.
//

import SpriteKit

class GameScene: SKScene, SKPhysicsContactDelegate {
    
    // global holder for bird sprite, global to detect collisions
    var bird = SKSpriteNode()
    
    var pointBoard = SKLabelNode()
    var status = SKLabelNode()
    var restart = SKLabelNode()
    
    // global holder for bird animations, global to be able to change the animation
    var alternateTexture = SKAction()
    
    var point = -1
    
    var collision = false
    
    // ???
    let birdGroup:UInt32 = 1
    let objectGroup:UInt32 = 2
    
    // main method
    override func didMoveToView(view: SKView) {
        // set gravity in scene
        self.physicsWorld.gravity = CGVectorMake(0, -5.0)
        
        // ????
        self.physicsWorld.contactDelegate = self
        
        restartGameScene()
    }
    
    func restartGameScene(){
        createGround()
        createBackground()
        createForeground()
        createPointBoard()
        createStatus()
        createBird()
        
        var spawnPipes = SKAction.runBlock { () -> Void in
            self.createPipes()
        }
        
        var sleepAction = SKAction.waitForDuration(3)
        var runAll = SKAction.sequence([spawnPipes, sleepAction])
        var repeatForever = SKAction.repeatActionForever(runAll)
        self.runAction(repeatForever)
        
    }
    
    func didBeginContact(contact: SKPhysicsContact) {
        println("Collision!")
        
        var explodeTexture1 = SKTexture(imageNamed: "explode1.png")
        var explodeTexture2 = SKTexture(imageNamed: "explode2.png")
        var explodeTexture3 = SKTexture(imageNamed: "explode3.png")
        var explodeTexture4 = SKTexture(imageNamed: "explode4.png")
        var explodeTexture5 = SKTexture(imageNamed: "explode5.png")
        
        alternateTexture = SKAction.animateWithTextures([explodeTexture1, explodeTexture2, explodeTexture3, explodeTexture4, explodeTexture5], timePerFrame: 0.1)
        var repeatAndKill = SKAction.repeatAction(alternateTexture, count: 10)
        bird.runAction(repeatAndKill)
        
        collision = true
        
    }
    
    func createGround(){
        // make ground
        var ground = SKNode()
        // position ground in scene
        ground.position = CGPoint(x: 0, y:0)
        ground.physicsBody = SKPhysicsBody(rectangleOfSize: CGSize(width: size.width, height: 15))
        ground.physicsBody?.dynamic = false
        ground.physicsBody?.categoryBitMask = objectGroup
        addChild(ground)
        
    }
    
    func createPointBoard(){
        pointBoard = SKLabelNode(fontNamed: "MizuFontAlphabet")
        pointBoard.text = "0"
        pointBoard.fontSize = 36
        pointBoard.position = CGPointMake(self.frame.size.width/2+208, self.frame.size.height/2+350)
        pointBoard.horizontalAlignmentMode = .Right
        addChild(pointBoard)
        
    }
    
    func createStatus(){
        status = SKLabelNode(fontNamed: "MizuFontAlphabet")
        status.text = ""
        status.fontSize = 60
        status.position = CGPointMake(self.frame.size.width/2, self.frame.size.height/2+40)
        
        addChild(status)
        
        restart = SKLabelNode(fontNamed: "MizuFontAlphabet")
        restart.text = ""
        restart.fontSize = 36
        restart.position = CGPointMake(self.frame.size.width/2, self.frame.size.height/2-10)
        
        addChild(restart)
        
    }
    
    func createBackground(){
        var backgroundTexture = SKTexture(imageNamed: "bg.png")
        var background = SKSpriteNode(texture: backgroundTexture)
        background.position = CGPointMake(self.frame.size.width/2, self.frame.size.height/2)
        background.size.height = self.frame.height
        background.size.width = self.frame.width
        background.zPosition = -1
        var moveLeft = SKAction.moveByX(-backgroundTexture.size().width, y: 0, duration: 25)
        var moveRight = SKAction.moveByX(backgroundTexture.size().width, y: 0, duration: 0)
        var moveAction = SKAction.sequence([moveLeft, moveRight])
        var repeatForever = SKAction.repeatActionForever(moveAction)
        
        for var i:CGFloat = 0;i<3;i++ {
            background = SKSpriteNode(texture: backgroundTexture)
            background.position = CGPoint(x: size.width/2 + backgroundTexture.size().width * i, y: CGRectGetMidY(self.frame))
            background.size.height = self.frame.size.height
            background.runAction(repeatForever)
            addChild(background)
        }
    }
    
    func createPipes(){
        var gapHeight = bird.size.height * 4
        var movementAmount = arc4random() % UInt32(size.height/2)
        
        println("movementAmount was: \(movementAmount)")
        
        if (collision == true){
            
            status.text = "game over!"
            
            restart.text = "restart"
            
            bird.removeFromParent()
            
        }
        else {
            point = point + 1
            
            pointBoard.text = String(point)
            
        }
        
        var pipeOffset = CGFloat(movementAmount) - size.height/4
        
        var topPipeTexture = SKTexture(imageNamed: "pipe1.png")
        var topPipe = SKSpriteNode(texture: topPipeTexture)
        topPipe.position = CGPoint(x: size.width, y: size.height/2 + topPipe.size.height/2 + gapHeight/2 + pipeOffset)
        topPipe.zPosition = 0
        
        var bottomPipeTexture = SKTexture(imageNamed: "pipe2.png")
        var bottomPipe = SKSpriteNode(texture: bottomPipeTexture)
        
        println(gapHeight)
        println(pipeOffset)
        println(size.height)
        
        bottomPipe.position = CGPoint(x: size.width, y: size.height/2 - bottomPipe.size.height/2 - gapHeight/2 + pipeOffset)
        bottomPipe.zPosition = 0
        
        // collisions
        topPipe.physicsBody = SKPhysicsBody(rectangleOfSize: topPipe.size)
        topPipe.physicsBody?.categoryBitMask = objectGroup
        topPipe.physicsBody?.dynamic = false
        
        bottomPipe.physicsBody = SKPhysicsBody(rectangleOfSize: bottomPipe.size)
        bottomPipe.physicsBody?.categoryBitMask = objectGroup
        bottomPipe.physicsBody?.dynamic = false
        
        // move pipes
        var movePipes = SKAction.moveByX(-size.width * 2, y: 0, duration: NSTimeInterval(size.width/100))
        var removePipes = SKAction.removeFromParent()
        var moveAndRemove = SKAction.sequence([movePipes, removePipes])
        topPipe.runAction(moveAndRemove)
        bottomPipe.runAction(moveAndRemove)
        
        addChild(topPipe)
        addChild(bottomPipe)
        
    }
    
    func createForeground(){
        var foregroundTexture = SKTexture(imageNamed: "foreground2.png")
        var foreground = SKSpriteNode(texture: foregroundTexture)
        //        foreground.position = CGPointMake(self.frame.size.width/2, self.frame.size.height + 100)
        //        foreground.size.height = self.frame.height
        //        foreground.size.width = self.frame.width
        var moveLeft = SKAction.moveByX(-foregroundTexture.size().width, y: 0, duration: 2)
        var moveRight = SKAction.moveByX(foregroundTexture.size().width, y: 0, duration: 0)
        var moveAction = SKAction.sequence([moveLeft, moveRight])
        var repeatForever = SKAction.repeatActionForever(moveAction)
        
        for var i:CGFloat = 0;i<3;i++ {
            foreground = SKSpriteNode(texture: foregroundTexture)
            foreground.position = CGPoint(x: size.width/2 + foregroundTexture.size().width * i, y: foregroundTexture.size().height/2)
            //            foreground.size.height = self.frame.size.height
            foreground.runAction(repeatForever)
            foreground.zPosition = 2
            addChild(foreground)
        }
    }
    
    func createBird() {
        var birdTexture1 = SKTexture(imageNamed: "flappy1.png")
        var birdTexture2 = SKTexture(imageNamed: "flappy2.png")
        bird = SKSpriteNode(texture: birdTexture1)
        alternateTexture = SKAction.animateWithTextures([birdTexture1, birdTexture2], timePerFrame: 0.1)
        var repeatForever = SKAction.repeatActionForever(alternateTexture)
        bird.position = CGPointMake(self.frame.size.width/2 - 100, self.frame.size.height/2)
        bird.runAction(repeatForever)
        bird.zPosition = 1 // put bird on second top layer
        bird.physicsBody = SKPhysicsBody(circleOfRadius: bird.size.height/2)
        bird.physicsBody?.categoryBitMask = birdGroup
        bird.physicsBody?.contactTestBitMask = objectGroup
        bird.physicsBody?.allowsRotation = false
        
        addChild(bird)
    }
    
    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
        if (collision == false){
            bird.physicsBody?.velocity = CGVectorMake(0, 0)
            bird.physicsBody?.applyImpulse(CGVectorMake(0, 50))
            
            
        }
    }
    
    override func update(currentTime: CFTimeInterval) {
        /* Called before each frame is rendered */
    }
}
